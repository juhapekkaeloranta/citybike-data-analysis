### calculations ###
stationMeans <- function(df) {
return(data.frame(t(colMeans(DF, na.rm = FALSE, dims = 1))))
}
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
library(jsonlite)
# generic helpers
idFormat <- function(intId) {
stringId <- as.character(intId)
while(nchar(stringId) < 3) {
stringId <- paste("0", stringId, sep = "")
}
return(stringId)
}
### plotting functions ###
# draw one
draw_plot <- function(stationID) {
matr <- as.matrix(t(DF[stationID]))
stationName <- stations[stations$stationId==stationID,]$name
barplot(matr, main=stationName,
xlab="Time of day", ylab="bikes available",
names.arg=observationTimesHuman,
col='blue')
}
draw_plot_animate <- function(stations) {
for (i in stations) {
#convert int to id
draw_plot(idFormat(i))
Sys.sleep(2)
}
}
### calculations ###
stationMeans <- function(df) {
return(data.frame(t(colMeans(df, na.rm = FALSE, dims = 1))))
}
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
View(meansByStation)
library(jsonlite)
# generic helpers
idFormat <- function(intId) {
stringId <- as.character(intId)
while(nchar(stringId) < 3) {
stringId <- paste("0", stringId, sep = "")
}
return(stringId)
}
### plotting functions ###
# draw one
draw_plot <- function(stationID) {
matr <- as.matrix(t(DF[stationID]))
stationName <- stations[stations$stationId==stationID,]$name
barplot(matr, main=stationName,
xlab="Time of day", ylab="bikes available",
names.arg=observationTimesHuman,
col='blue')
}
draw_plot_animate <- function(stations) {
for (i in stations) {
#convert int to id
draw_plot(idFormat(i))
Sys.sleep(2)
}
}
### calculations ###
stationMeans <- function(df) {
means <- data.frame(t(colMeans(df, na.rm = FALSE, dims = 1)))
colnames(means) <- colnames()
return(means)
}
View(meansByStation)
library(jsonlite)
# generic helpers
idFormat <- function(intId) {
stringId <- as.character(intId)
while(nchar(stringId) < 3) {
stringId <- paste("0", stringId, sep = "")
}
return(stringId)
}
### plotting functions ###
# draw one
draw_plot <- function(stationID) {
matr <- as.matrix(t(DF[stationID]))
stationName <- stations[stations$stationId==stationID,]$name
barplot(matr, main=stationName,
xlab="Time of day", ylab="bikes available",
names.arg=observationTimesHuman,
col='blue')
}
draw_plot_animate <- function(stations) {
for (i in stations) {
#convert int to id
draw_plot(idFormat(i))
Sys.sleep(2)
}
}
### calculations ###
stationMeans <- function(df) {
means <- data.frame(t(colMeans(df, na.rm = FALSE, dims = 1)))
colnames(means) <- colnames(df)
return(means)
}
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
View(meansByStation)
getObservationData('foo')
getObservationData('foo')
library(jsonlite)
# helpers
idFormat <- function(intId) {
stringId <- as.character(intId)
while(nchar(stringId) < 3) {
stringId <- paste("0", stringId, sep = "")
}
return(stringId)
}
getTimeStampsForDate <- function(varDateYYYYMMDD) {
# set of timestamps - TODO: whole day in a loop
timesHHMM <- c("0852", "0952", "0000")
fullDateTimes <- sapply(timesHHMM, function(x) paste(varDateYYYYMMDD, "T", x, "01Z", sep = ""))
return(fullDateTimes)
}
getHumanReadableTimes <- function(setOfTimeStamps) {
# setOfTimeStamps format: c(YYYYMMDDTHHDDSSZ, ...)
# = rownames from bikeDF
hour <- substring(rownames(DF), 10, 11)
minute <- substring(rownames(DF), 12, 13)
return(paste(hour, ":", minute, sep=""))
}
#################################
### GET CITYBIKEDATA FROM HSL ###
#################################
### defining functions ###
getBasicStationInfo <- function() {
stationsJSON <- fromJSON("https://raw.githubusercontent.com/juhapekkamoilanen/citybike-data-analysis/master/stations.json")
return(stationsJSON$stations)
}
initDataFrameForBikedata <- function(stationsBasicData) {
stationIDs <- stationsBasicData$stationId
emptyDF <- as.data.frame(matrix(ncol=NROW(stationIDs), nrow=0))
colnames(emptyDF) <- t(stationIDs)
return(emptyDF)
}
getObservationData <- function(datetime_string) {
# Note HSL times in UTC
tryCatch({
url <- paste("http://dev.hsl.fi/tmp/citybikes/stations_", datetime_string, sep = "")
observation <- fromJSON(url)$result
return(observation)
}, error=function(e){})
}
getAndSaveObservationDataByDates <- function(df, datetime_strings) {
for (d in datetime_strings) {
indexOfNextRow <- nrow(df) + 1
df[indexOfNextRow, ] <- getObservationData(d)$avl_bikes
rownames(df)[indexOfNextRow] <- d
}
return(df)
}
addTimeUnitColumns <- function(df) {
df$year <- sapply(rownames(df), function(x) as.numeric(substr(x, 1, 4)))
df$month <- sapply(rownames(df), function(x) as.numeric(substr(x, 5, 6)))
df$day <- sapply(rownames(df), function(x) as.numeric(substr(x, 7, 8)))
df$hour <- sapply(rownames(df), function(x) as.numeric(substr(x, 10, 11)))
df$minute <- sapply(rownames(df), function(x) as.numeric(substr(x, 12, 13)))
df$decMinute <- sapply(rownames(df), function(x) (as.numeric(substr(x, 12, 13)) %/% 10 + 1))
return(df)
}
### execution ###
getWebData <- function(date) {
stationsInfo <- getBasicStationInfo()
bikeDF <- initDataFrameForBikedata(stationsInfo)
bikeDF <- getAndSaveObservationDataByDates(bikeDF, getTimeStampsForDate(date))
bikeDF <- addTimeUnitColumns(bikeDF)
return(bikeDF)
}
getObservationData('foo')
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
url <- paste("http://dev.hsl.fi/tmp/citybikes/stations_", "FOO", sep = "")
url
fromJSON("foo")
fromJSON(http://dev.hsl.fi/tmp/citybikes/)
fromJSON("http://dev.hsl.fi/tmp/citybikes/foo.json")
foofoo <- fromJSON("http://dev.hsl.fi/tmp/citybikes/foo.json")
foofoo
foofoo = NULL
foof == NULL
foof == NA
is.na(foof)
setwd("~/Git_projects/BikeData")
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
View(bikeDF)
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
foo = NA
foo == NA
foo != NA
"foo" == NA
"foo" != NA
is.na("foo")
is.na(foo)
!is.na(foo)
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
View(bikeDF)
?array
?vectro
?vector
genTimeStringFor24h <- function() {
times <- c()
for(h in 0:23) {
for(m in 0:59) {
times <- c(times, paste(as.character(h), as.character(m), sep = ""))
}
}
times
}
genTimeStringFor24h <- function() {
times <- c()
for(h in 0:23) {
for(m in 0:59) {
times <- c(times, paste(as.character(h), as.character(m), sep = ""))
}
}
print(times)
}
genTimeStringFor24h()
genTimeStringFor24h()
timeFormat(1)
timeFormat <- function(intHH) {
return(intToStringWithZeros(intHH, 2))
}
intToStringWithZeros <- functions(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(stringId) < varLenght) {
stringId <- paste("0", stringId, sep="")
}
return(stringId)
}
idFormat <- function(intId) {
return(intToStringWithZeros(intId, 3))
}
timeFormat <- function(intHH) {
return(intToStringWithZeros(intHH, 2))
}
genTimeStringFor24h()
timeFormat(1)
intToStringWithZeros <- functions(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(stringId) < varLenght) {
stringId <- paste("0", stringId, sep="")
}
return(stringId)
}
intToStringWithZeros <- functions(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(varInt) < varLenght) {
varInt <- paste("0", varInt, sep="")
}
return(varInt)
}
intToStringWithZeros <- functions(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(varInt) < varLenght) {
varInt <- paste("0", varInt, sep="")
}
return(varInt)
}
intToStringWithZeros <- functions(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(resultString) < varLenght) {
resultString <- paste("0", resultString, sep="")
}
return(resultString)
}
intToStringWithZeros <- functions(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(resultString) < varLenght) {
resultString <- paste("0", resultString, sep="")
}
return(resultString)
}
intToStringWithZeros <- function(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(resultString) < varLenght) {
resultString <- paste("0", resultString, sep="")
}
return(resultString)
}
genTimeStringFor24h()
timeFormat(1)
intToStringWithZeros <- function(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(resultString) < varLength) {
resultString <- paste("0", resultString, sep="")
}
return(resultString)
}
genTimeStringFor24h()
timeFormat(1)
intToStringWithZeros <- function(varInt, varLength) {
resultString <- as.character(varInt)
while(nchar(resultString) < varLength) {
resultString <- paste("0", resultString, sep="")
}
return(resultString)
}
idFormat <- function(intId) {
return(intToStringWithZeros(intId, 3))
}
timeFormat <- function(intHH) {
return(intToStringWithZeros(intHH, 2))
}
genTimeStringFor24h <- function() {
times <- c()
for(h in 0:23) {
for(m in 0:59) {
times <- c(times, paste(timeFormat(h), timeFormat(m), sep = ""))
}
}
print(times)
}
genTimeStringFor24h()
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
warning()
warnings()
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
12*60
24*60
View(meansByStation)
draw_plot("001")
library(jsonlite)
# generic helpers
idFormat <- function(intId) {
stringId <- as.character(intId)
while(nchar(stringId) < 3) {
stringId <- paste("0", stringId, sep = "")
}
return(stringId)
}
### plotting functions ###
# draw one
draw_plot <- function(DF, stationID) {
matr <- as.matrix(t(DF[stationID]))
stationName <- stations[stations$stationId==stationID,]$name
barplot(matr, main=stationName,
xlab="Time of day", ylab="bikes available",
names.arg=observationTimesHuman,
col='blue')
}
draw_plot_animate <- function(stations) {
for (i in stations) {
#convert int to id
draw_plot(idFormat(i))
Sys.sleep(2)
}
}
### calculations ###
stationMeans <- function(df) {
means <- data.frame(t(colMeans(df, na.rm = FALSE, dims = 1)))
colnames(means) <- colnames(df)
return(means)
}
setwd("~/Git_projects/BikeData")
rm(list = ls())
source("getWebData.r")
source("analysisFunctions.r")
bikeDF <- getWebData("20170625")
# some test variables
espaAsemat <- c("012", "047", "014", "011", "018", "009", "024", "022", "019")
meansByStation <- stationMeans(bikeDF)
humanReadableObservationTimes <- paste(substring(rownames(bikeDF), 10, 11), ":", substring(rownames(bikeDF), 12, 13), sep="")
#draw_plot_animate(espaAsemat)
draw_plot(bikeDF, "001")
getBasicStationInfo <- function() {
stationsJSON <- fromJSON("https://raw.githubusercontent.com/juhapekkamoilanen/citybike-data-analysis/master/stations.json")
return(stationsJSON$stations)
}
draw_plot(bikeDF, "001")
stations <- getBasicStationInfo()
draw_plot(bikeDF, "001")
draw_plot(bikeDF, "001")
source("analysisFunctions.r")
draw_plot(bikeDF, "001")
source("analysisFunctions.r")
draw_plot(bikeDF, "001")
source("analysisFunctions.r")
draw_plot(bikeDF, "001")
draw_plot_animate(espaAsemat)
source("analysisFunctions.r")
draw_plot_animate(bikeDF, espaAsemat)
View(bikeDF)
colnames(bikeDF)
colnames(bikeDF)[1:100]
colnames(bikeDF)[1:148]
draw_plot_animate(bikeDF, allStations)
allStations <- colnames(bikeDF)[1:148]
draw_plot_animate(bikeDF, allStations)
